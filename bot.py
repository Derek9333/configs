import os
import re
import logging
import tempfile
import base64
import json
import pycountry
import requests
import time
import socket
import concurrent.futures
import spacy
from urllib.parse import urlparse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    CallbackContext
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MAX_FILE_SIZE = 15 * 1024 * 1024  # 15 MB
MAX_MSG_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø–∞—Å–æ–º
GEOIP_API = "http://ip-api.com/json/"
HEADERS = {'User-Agent': 'Telegram V2Ray Config Bot/1.0'}
MAX_WORKERS = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
CHUNK_SIZE = 100  # –†–∞–∑–º–µ—Ä —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤
MAX_CONFIGS_PER_USER = 5000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_FILE, WAITING_COUNTRY, WAITING_MODE, SENDING_CONFIGS = range(4)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–æ–¥–µ–ª–∏ Spacy
nlp_model = None

def load_spacy_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Spacy –¥–ª—è NER –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
    global nlp_model
    if nlp_model is None:
        try:
            nlp_model = spacy.load("en_core_web_sm")
            logger.info("–ú–æ–¥–µ–ª—å Spacy —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Spacy: {e}")
    return nlp_model

def normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç, –∑–∞–º–µ–Ω—è—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã"""
    text = text.lower().strip()
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω (—Ä—É—Å—Å–∫–∏–µ -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)
    ru_en_map = {
        "—Ä–æ—Å—Å–∏—è": "russia", "—Ä—É—Å—Å–∫–∏–π": "russia", "—Ä—Ñ": "russia", "—Ä—É": "russia",
        "—Å—à–∞": "united states", "–∞–º–µ—Ä–∏–∫–∞": "united states", "usa": "united states", 
        "us": "united states", "—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —à—Ç–∞—Ç—ã": "united states",
        "–≥–µ—Ä–º–∞–Ω–∏—è": "germany", "–¥–æ–π—á–ª–∞–Ω–¥": "germany", "deutschland": "germany", "–¥–µ": "germany",
        "—è–ø–æ–Ω–∏—è": "japan", "—è–ø–æ–Ω–∏–∏": "japan", "jp": "japan", "—è–ø": "japan",
        "—Ñ—Ä–∞–Ω—Ü–∏—è": "france", "—Ñ—Ä": "france", "—Ñ—Ä–∞–Ω—Å": "france",
        "–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "united kingdom", "–±—Ä–∏—Ç": "united kingdom", "–∞–Ω–≥–ª–∏—è": "united kingdom", 
        "gb": "united kingdom", "uk": "united kingdom", "–≥–±": "united kingdom",
        "—Å–∏–Ω–≥–∞–ø—É—Ä": "singapore", "sg": "singapore", "—Å–∏–Ω–≥": "singapore",
        "–Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": "netherlands", "–≥–æ–ª–ª–∞–Ω–¥–∏—è": "netherlands", "nl": "netherlands", "–Ω–ª": "netherlands",
        "–∫–∞–Ω–∞–¥–∞": "canada", "ca": "canada", "–∫–∞–Ω": "canada",
        "—à–≤–µ–π—Ü–∞—Ä–∏—è": "switzerland", "ch": "switzerland", "—à–≤–µ–π—Ü": "switzerland",
        "—à–≤–µ—Ü–∏—è": "sweden", "se": "sweden", "—à–≤–µ–¥": "sweden",
        "–∞–≤—Å—Ç—Ä–∞–ª–∏—è": "australia", "–æ–∑": "australia", "au": "australia", "–∞–≤—Å—Ç—Ä": "australia",
        "–±—Ä–∞–∑–∏–ª–∏—è": "brazil", "br": "brazil", "–±—Ä–∞–∑": "brazil",
        "–∏–Ω–¥–∏—è": "india", "in": "india", "–∏–Ω–¥": "india",
        "—é–∂–Ω–∞—è –∫–æ—Ä–µ—è": "south korea", "–∫—Ä": "south korea", "sk": "south korea", 
        "–∫–æ—Ä–µ—è": "south korea", "–∫–æ—Ä": "south korea",
        "—Ç—É—Ä—Ü–∏—è": "turkey", "tr": "turkey", " —Ç—É—Ä ": "turkey",
        "—Ç–∞–π–≤–∞–Ω—å": "taiwan", "tw": "taiwan", "—Ç–∞–π–≤": "taiwan",
        "—é–∞—Ä": "south africa", "sa": "south africa", "–∞—Ñ—Ä–∏–∫–∞": "south africa",
        "–æ–∞—ç": "united arab emirates", "—ç–º–∏—Ä–∞—Ç—ã": "united arab emirates", 
        "uae": "united arab emirates", "–∞—Ä–∞–±—Å–∫–∏–µ": "united arab emirates",
        "—Å–∞—É–¥–æ–≤—Å–∫–∞—è –∞—Ä–∞–≤–∏—è": "saudi arabia", "—Å–∞—É–¥": "saudi arabia", 
        "ksa": "saudi arabia", "—Å–∞—É–¥–æ–≤—Å–∫–∞—è": "saudi arabia",
        "–∏–∑—Ä–∞–∏–ª—å": "israel", "il": "israel", "–∏–∑—Ä": "israel",
        "–º–µ–∫—Å–∏–∫–∞": "mexico", "mx": "mexico", "–º–µ–∫—Å": "mexico",
        "–∞—Ä–≥–µ–Ω—Ç–∏–Ω–∞": "argentina", "ar": "argentina", "–∞—Ä–≥": "argentina",
        "–∏—Ç–∞–ª–∏—è": "italy", "it": "italy", "–∏—Ç": "italy",
        "–∏—Å–ø–∞–Ω–∏—è": "spain", "es": "spain", "–∏—Å–ø": "spain",
        "–ø–æ—Ä—Ç—É–≥–∞–ª–∏—è": "portugal", "pt": "portugal", "–ø–æ—Ä—Ç": "portugal",
        "–Ω–æ—Ä–≤–µ–≥–∏—è": "norway", "no": "norway", "–Ω–æ—Ä–≤": "norway",
        "—Ñ–∏–Ω–ª—è–Ω–¥–∏—è": "finland", "fi": "finland", "—Ñ–∏–Ω": "finland",
        "–¥–∞–Ω–∏—è": "denmark", "dk": "denmark", "–¥–∞–Ω": "denmark",
        "–ø–æ–ª—å—à–∞": "poland", "pl": "poland", "–ø–æ–ª": "poland",
        "—É–∫—Ä–∞–∏–Ω–∞": "ukraine", "ua": "ukraine", "—É–∫—Ä": "ukraine",
        "–±–µ–ª–∞—Ä—É—Å—å": "belarus", "by": "belarus", "–±–µ–ª": "belarus",
        "–∫–∏—Ç–∞–π": "china", "cn": "china", "–∫–Ω—Ä": "china",
        "–∏–Ω–¥–æ–Ω–µ–∑–∏—è": "indonesia", "id": "indonesia", "–∏–Ω–¥–æ": "indonesia",
        "–º–∞–ª–∞–π–∑–∏—è": "malaysia", "my": "malaysia", "–º–∞–ª–∞–π": "malaysia",
        "—Ñ–∏–ª–∏–ø–ø–∏–Ω—ã": "philippines", "ph": "philippines", "—Ñ–∏–ª": "philippines",
        "–≤—å–µ—Ç–Ω–∞–º": "vietnam", "vn": "vietnam", "–≤—å–µ—Ç": "vietnam",
        "—Ç–∞–π–ª–∞–Ω–¥": "thailand", "th": "thailand", "—Ç–∞–π": "thailand",
        "—á–µ—Ö–∏—è": "czech republic", "cz": "czech republic", "—á–µ—Ö": "czech republic",
        "—Ä—É–º—ã–Ω–∏—è": "romania", "ro": "romania", "—Ä—É–º": "romania",
        "–≤–µ–Ω–≥—Ä–∏—è": "hungary", "hu": "hungary", "–≤–µ–Ω–≥": "hungary",
        "–≥—Ä–µ—Ü–∏—è": "greece", "gr": "greece", "–≥—Ä–µ—Ü": "greece",
        "–±–æ–ª–≥–∞—Ä–∏—è": "bulgaria", "bg": "bulgaria", "–±–æ–ª–≥": "bulgaria",
        "–µ–≥–∏–ø–µ—Ç": "egypt", "eg": "egypt", "–µ–≥–∏–ø": "egypt",
        "–Ω–∏–≥–µ—Ä–∏—è": "nigeria", "ng": "nigeria", "–Ω–∏–≥–µ—Ä": "nigeria",
        "–∫–µ–Ω–∏—è": "kenya", "ke": "kenya", "–∫–µ–Ω": "kenya",
        "–∫–æ–ª—É–º–±–∏—è": "colombia", "co": "colombia", "–∫–æ–ª—É–º–±": "colombia",
        "–ø–µ—Ä—É": "peru", "pe": "peru",
        "—á–∏–ª–∏": "chile", "cl": "chile",
        "–≤–µ–Ω–µ—Å—É—ç–ª–∞": "venezuela", "ve": "venezuela", "–≤–µ–Ω–µ—Å": "venezuela",
        "–∞–≤—Å—Ç—Ä–∏—è": "austria", "at": "austria", "–∞–≤—Å—Ç—Ä": "austria",
        "–±–µ–ª—å–≥–∏—è": "belgium", "be": "belgium", "–±–µ–ª—å–≥": "belgium",
        "–∏—Ä–ª–∞–Ω–¥–∏—è": "ireland", "ie": "ireland", "–∏—Ä–ª": "ireland"
    }
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
    sorted_keys = sorted(ru_en_map.keys(), key=len, reverse=True)
    for key in sorted_keys:
        text = text.replace(key, ru_en_map[key])
    
    return text

async def check_configs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data.clear()
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ V2RayTun."
    )
    return WAITING_FILE

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    user = update.message.from_user
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not document.mime_type.startswith('text/'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE//1024//1024}MB"
        )
        return ConversationHandler.END
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    file = await context.bot.get_file(document.file_id)
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        await file.download_to_memory(tmp_file)
        context.user_data['file_path'] = tmp_file.name
        context.user_data['file_name'] = document.file_name
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª: {document.file_name} ({document.file_size} –±–∞–π—Ç)")
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
    keyboard = [
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª", callback_data='add_file')],
        [InlineKeyboardButton("üåç –£–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data='set_country')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª '{document.file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ:",
        reply_markup=reply_markup
    )
    return WAITING_COUNTRY

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'add_file':
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.")
        return WAITING_FILE
    
    elif query.data == 'set_country':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):")
        return WAITING_COUNTRY
    
    elif query.data == 'fast_mode':
        context.user_data['search_mode'] = 'fast'
        await process_search(update, context)
        return SENDING_CONFIGS
    
    elif query.data == 'strict_mode':
        context.user_data['search_mode'] = 'strict'
        await process_search(update, context)
        return SENDING_CONFIGS
    
    elif query.data == 'stop_sending':
        context.user_data['stop_sending'] = True
        await query.edit_message_text("‚èπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return ConversationHandler.END
    
    return WAITING_COUNTRY

async def handle_country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω—ã"""
    country_request = update.message.text
    context.user_data['country_request'] = country_request
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
    keyboard = [
        [
            InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", callback_data='fast_mode'),
            InlineKeyboardButton("üîç –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫", callback_data='strict_mode')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É: {country_request}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:",
        reply_markup=reply_markup
    )
    return WAITING_MODE

async def process_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    query = update.callback_query
    if query:
        await query.answer()
        user_id = query.from_user.id
    else:
        user_id = update.message.from_user.id
    
    country_request = context.user_data.get('country_request', '')
    search_mode = context.user_data.get('search_mode', 'fast')
    
    if not country_request:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
        return ConversationHandler.END
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç—Ä–∞–Ω—É: {country_request} –≤ —Ä–µ–∂–∏–º–µ {search_mode}")
    
    normalized_text = normalize_text(country_request)
    logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {normalized_text}")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É —á–µ—Ä–µ–∑ pycountry
        countries = pycountry.countries.search_fuzzy(normalized_text)
        country = countries[0]
        target_country = country.name.lower()
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {country.name} (—Ü–µ–ª–µ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {target_country})")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω
        aliases = get_country_aliases(target_country)
        country_codes = [c.alpha_2.lower() for c in countries] + [country.alpha_2.lower()]
        
        logger.info(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å—Ç—Ä–∞–Ω—ã: {aliases}, –∫–æ–¥—ã: {country_codes}")
    except LookupError:
        logger.warning(f"–°—Ç—Ä–∞–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {country_request}")
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–∞–Ω—É —á–µ—Ä–µ–∑ NER
        nlp = load_spacy_model()
        if nlp:
            try:
                doc = nlp(normalized_text)
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: {[(ent.text, ent.label_) for ent in doc.ents]}")
                
                found_countries = []
                for ent in doc.ents:
                    if ent.label_ in ['GPE', 'COUNTRY']:
                        try:
                            # –ò—â–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—É—â–Ω–æ—Å—Ç–∏
                            countries_list = pycountry.countries.search_fuzzy(ent.text)
                            if countries_list:
                                country_obj = countries_list[0]
                                found_countries.append(country_obj.name)
                                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ NER: {ent.text} -> {country_obj.name}")
                        except LookupError:
                            continue
                
                if found_countries:
                    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
                    seen = set()
                    unique_countries = [c for c in found_countries if c not in seen and not seen.add(c)]
                    
                    if len(unique_countries) == 1:
                        country_name = unique_countries[0]
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
                        country_name = unique_countries[0]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω—ã
                    country = pycountry.countries.search_fuzzy(country_name)[0]
                    target_country = country.name.lower()
                    aliases = get_country_aliases(target_country)
                    country_codes = [country.alpha_2.lower()]
                    logger.info(f"–°—Ç—Ä–∞–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ NER: {country.name}")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É —á–µ—Ä–µ–∑ NER")
                    await context.bot.send_message(chat_id=user_id, text="‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                    return ConversationHandler.END
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ NER: {e}")
                await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return ConversationHandler.END
        else:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['country'] = country.name
    context.user_data['target_country'] = target_country
    context.user_data['aliases'] = aliases
    context.user_data['country_codes'] = country_codes
    
    # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    file_paths = context.user_data.get('file_paths', [])
    if not file_paths:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –µ—â–µ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
        if 'file_path' in context.user_data:
            file_paths = [context.user_data['file_path']]
            context.user_data['file_paths'] = file_paths
    
    if not file_paths:
        logger.error("–ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    all_configs = []
    for file_path in file_paths:
        try:
            await context.bot.send_message(chat_id=user_id, text="‚è≥ –ò–¥–µ—Ç —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
            start_time = time.time()
            with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                configs = f.read().splitlines()
            logger.info(f"–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(configs)} —Å—Ç—Ä–æ–∫, –∑–∞ {time.time()-start_time:.2f} —Å–µ–∫")
            all_configs.extend(configs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await context.bot.send_message(chat_id=user_id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    if not all_configs:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –í —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
        return ConversationHandler.END
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
    if len(all_configs) > MAX_CONFIGS_PER_USER:
        all_configs = all_configs[:MAX_CONFIGS_PER_USER]
        await context.bot.send_message(
            chat_id=user_id, 
            text=f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {MAX_CONFIGS_PER_USER} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
        )
    
    context.user_data['all_configs'] = all_configs
    
    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
    if search_mode == 'fast':
        await context.bot.send_message(chat_id=user_id, text="üîé –ù–∞—á–∏–Ω–∞—é –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
        await fast_search(update, context)
    # –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫
    else:
        await context.bot.send_message(chat_id=user_id, text="üîç –ù–∞—á–∏–Ω–∞—é —Å—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
        await strict_search(update, context)
    
    return SENDING_CONFIGS

async def fast_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
    all_configs = context.user_data.get('all_configs', [])
    target_country = context.user_data.get('target_country', '')
    aliases = context.user_data.get('aliases', [])
    country_codes = context.user_data.get('country_codes', [])
    
    if not all_configs or not target_country:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return ConversationHandler.END
    
    # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
    start_time = time.time()
    matched_configs = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–∞—Ö
    flag_pattern = get_country_flag_pattern(context.user_data['country'])
    
    for i, config in enumerate(all_configs):
        if not config.strip():
            continue
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –¥–æ–º–µ–Ω–Ω—ã–º –∑–æ–Ω–∞–º
            if is_config_relevant(config, target_country, aliases, country_codes, flag_pattern):
                matched_configs.append(config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ #{i}: {e}")
            continue
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 –∫–æ–Ω—Ñ–∏–≥–æ–≤
        if i % 1000 == 0 and i > 0:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(all_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matched_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è {context.user_data['country']}, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {time.time()-start_time:.2f} —Å–µ–∫")
    
    if not matched_configs:
        await context.bot.send_message(chat_id=user_id, text=f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {context.user_data['country']} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    context.user_data['matched_configs'] = matched_configs
    context.user_data['current_index'] = 0
    context.user_data['stop_sending'] = False
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ñ–∏–≥–æ–≤
    await send_configs(update, context)

async def strict_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
    all_configs = context.user_data.get('all_configs', [])
    target_country = context.user_data.get('target_country', '')
    
    if not all_configs or not target_country:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return ConversationHandler.END
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    await context.bot.send_message(chat_id=user_id, text="üîé –≠—Ç–∞–ø 1: –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
    start_time = time.time()
    prelim_configs = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–∞—Ö
    flag_pattern = get_country_flag_pattern(context.user_data['country'])
    
    for i, config in enumerate(all_configs):
        if not config.strip():
            continue
        
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –¥–æ–º–µ–Ω–Ω—ã–º –∑–æ–Ω–∞–º
            if is_config_relevant(config, target_country, context.user_data['aliases'], context.user_data['country_codes'], flag_pattern):
                prelim_configs.append(config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ #{i}: {e}")
            continue
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 –∫–æ–Ω—Ñ–∏–≥–æ–≤
        if i % 1000 == 0 and i > 0:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(all_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
    
    logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ {len(prelim_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è {context.user_data['country']}, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {time.time()-start_time:.2f} —Å–µ–∫")
    
    if not prelim_configs:
        await context.bot.send_message(chat_id=user_id, text=f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {context.user_data['country']} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
    total_chunks = (len(prelim_configs) + CHUNK_SIZE - 1) // CHUNK_SIZE
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üîç –ù–∞—á–∏–Ω–∞—é —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(prelim_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å–µ–∫—Ç–æ—Ä–∞–º–∏ –ø–æ {CHUNK_SIZE}...\n"
        f"–í—Å–µ–≥–æ —Å–µ–∫—Ç–æ—Ä–æ–≤: {total_chunks}"
    )
    
    start_time = time.time()
    strict_matched_configs = []
    
    for chunk_idx in range(0, len(prelim_configs), CHUNK_SIZE):
        if context.user_data.get('stop_sending'):
            break
            
        chunk = prelim_configs[chunk_idx:chunk_idx + CHUNK_SIZE]
        chunk_start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–∫—Ç–æ—Ä
        valid_configs = strict_config_check(chunk, target_country)
        strict_matched_configs.extend(valid_configs)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        chunk_end_time = time.time()
        chunk_time = chunk_end_time - chunk_start_time
        
        if chunk_idx + CHUNK_SIZE < len(prelim_configs):
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –°–µ–∫—Ç–æ—Ä {chunk_idx//CHUNK_SIZE + 1}/{total_chunks} –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n"
                f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {len(valid_configs)}\n"
                f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {chunk_time:.1f} —Å–µ–∫\n"
                f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(strict_matched_configs)}"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if valid_configs:
            context.user_data['matched_configs'] = valid_configs
            context.user_data['current_index'] = 0
            await send_configs(update, context)
    
    total_time = time.time() - start_time
    logger.info(f"–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞–π–¥–µ–Ω–æ {len(strict_matched_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤, –∑–∞–Ω—è–ª–æ {total_time:.2f} —Å–µ–∫")
    
    if not strict_matched_configs:
        await context.bot.send_message(chat_id=user_id, text=f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {context.user_data['country']} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–Ω—Ñ–∏–≥–∏
    context.user_data['matched_configs'] = strict_matched_configs
    context.user_data['current_index'] = 0
    context.user_data['stop_sending'] = False
    await send_configs(update, context)

async def send_configs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
    matched_configs = context.user_data.get('matched_configs', [])
    current_index = context.user_data.get('current_index', 0)
    country_name = context.user_data.get('country', '')
    stop_sending = context.user_data.get('stop_sending', False)
    
    if not matched_configs or current_index >= len(matched_configs) or stop_sending:
        if not stop_sending and current_index < len(matched_configs):
            await context.bot.send_message(chat_id=user_id, text="‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_button = [[InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data='stop_sending')]]
    reply_markup = InlineKeyboardMarkup(stop_button)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    header = f"–ö–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è {country_name}:\n\n"
    message = header
    sent_count = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –∫–æ–Ω—Ñ–∏–≥–∞–º
    flag = get_country_flag(context.user_data['country'])
    
    while current_index < len(matched_configs):
        config = matched_configs[current_index]
        config_line = f"{flag} {config}\n\n" if flag else f"{config}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ª–∏–º–∏—Ç
        if len(message) + len(config_line) > MAX_MSG_LENGTH:
            break
            
        message += config_line
        current_index += 1
        sent_count += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if sent_count >= 20:
            break
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if message.strip() != header.strip():
            await context.bot.send_message(
                chat_id=user_id,
                text=f"<pre>{message}</pre>",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
    context.user_data['current_index'] = current_index
    
    # –ï—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_index < len(matched_configs) and not context.user_data.get('stop_sending', False):
        # –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        time.sleep(1)
        await send_configs(update, context)
    else:
        if current_index >= len(matched_configs):
            await context.bot.send_message(chat_id=user_id, text="‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return ConversationHandler.END

def is_config_relevant(config: str, target_country: str, aliases: list, country_codes: list, flag_pattern: str = None) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–µ"""
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ñ–ª–∞–≥—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if flag_pattern and re.search(flag_pattern, config, re.IGNORECASE):
        return True
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if detect_by_keywords(config, target_country, aliases):
        return True
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –¥–æ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
    domain = extract_domain(config)
    if domain:
        tld = domain.split('.')[-1].lower()
        if tld in country_codes:
            return True
    
    return False

def strict_config_check(configs: list, target_country: str) -> list:
    """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    valid_configs = []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = []
        for config in configs:
            futures.append(executor.submit(validate_config, config, target_country))
        
        for future in concurrent.futures.as_completed(futures):
            config, is_valid = future.result()
            if is_valid:
                valid_configs.append(config)
    
    return valid_configs

def validate_config(config: str, target_country: str) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —Å—Ç—Ä–∞–Ω–µ"""
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞
        host = extract_host(config)
        if not host:
            return (config, False)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
        ip = resolve_dns(host)
        if not ip:
            return (config, False)
        
        # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è IP
        country = geolocate_ip(ip)
        if not country or country.lower() != target_country:
            return (config, False)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥–∞
        if not validate_config_structure(config):
            return (config, False)
            
        return (config, True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return (config, False)

def validate_config_structure(config: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥–∞"""
    if config.startswith('vmess://'):
        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64
            encoded = config.split('://')[1].split('?')[0]
            padding = '=' * (-len(encoded) % 4)
            decoded = base64.b64decode(encoded + padding).decode('utf-8', errors='replace')
            json_data = json.loads(decoded)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['v', 'ps', 'add', 'port', 'id', 'aid']
            return all(field in json_data for field in required_fields)
        except:
            return False
    
    elif config.startswith('vless://'):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ VLESS
        pattern = r'vless://[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}@'
        return bool(re.match(pattern, config))
    
    # –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    return bool(re.search(r'\b(?:\d{1,3}\.){3}\d{1,3}:\d+\b', config))

def resolve_dns(host: str) -> str:
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤ IP-–∞–¥—Ä–µ—Å"""
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º IP-–∞–¥—Ä–µ—Å–∞
        if re.match(r'\d+\.\d+\.\d+\.\d+', host):
            return host
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ DNS
        return socket.gethostbyname(host)
    except:
        return None

def geolocate_ip(ip: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ IP"""
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if re.match(r'(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[0-1])\.)', ip):
            return None
        
        response = requests.get(f"{GEOIP_API}{ip}", headers=HEADERS, timeout=5)
        data = response.json()
        if data.get('status') == 'success':
            return data.get('country')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è {ip}: {e}")
    
    return None

def get_country_aliases(country_name: str) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
    aliases = {
        "united states": ["usa", "us", "—Å—à–∞", "–∞–º–µ—Ä–∏–∫–∞", "america", "united states of america"],
        "russia": ["—Ä–æ—Å—Å–∏—è", "ru", "rf", "—Ä—É—Å—Å–∫–∏–π", "russian federation"],
        "germany": ["–≥–µ—Ä–º–∞–Ω–∏—è", "de", "–≥–µ—Ä–º–∞–Ω–∏", "deutschland"],
        "united kingdom": ["great britain", "uk", "gb", "–∞–Ω–≥–ª–∏—è", "–±—Ä–∏—Ç–∞–Ω–∏—è", "britain", "england"],
        "france": ["—Ñ—Ä–∞–Ω—Ü–∏—è", "fr", "french republic"],
        "japan": ["—è–ø–æ–Ω–∏—è", "jp", "—è–ø–æ–Ω–∏–∏", "nippon"],
        "brazil": ["–±—Ä–∞–∑–∏–ª–∏—è", "br", "brasil"],
        "south korea": ["korea", "southkorea", "sk", "–∫–æ—Ä–µ—è", "–∫—Ä", "republic of korea"],
        "turkey": ["—Ç—É—Ä—Ü–∏—è", "tr", "—Ç—É—Ä–µ—Ü–∫–∏–π", "t√ºrkiye"],
        "taiwan": ["—Ç–∞–π–≤–∞–Ω—å", "tw", "—Ç–∞–π–≤–∞–Ω—è", "republic of china"],
        "switzerland": ["—à–≤–µ–π—Ü–∞—Ä–∏—è", "ch", "swiss confederation"],
        "china": ["cn", "–∫–∏—Ç–∞–π", "chinese", "people's republic of china"],
        "india": ["in", "–∏–Ω–¥–∏—è", "bharat"],
        "canada": ["ca", "–∫–∞–Ω–∞–¥–∞"],
        "australia": ["au", "–∞–≤—Å—Ç—Ä–∞–ª–∏—è", "oz"],
        "singapore": ["sg", "—Å–∏–Ω–≥–∞–ø—É—Ä"],
        "italy": ["it", "–∏—Ç–∞–ª–∏—è", "italia"],
        "spain": ["es", "–∏—Å–ø–∞–Ω–∏—è"],
        "portugal": ["pt", "–ø–æ—Ä—Ç—É–≥–∞–ª–∏—è"],
        "norway": ["no", "–Ω–æ—Ä–≤–µ–≥–∏—è"],
        "finland": ["fi", "—Ñ–∏–Ω–ª—è–Ω–¥–∏—è"],
        "denmark": ["dk", "–¥–∞–Ω–∏—è"],
        "poland": ["pl", "–ø–æ–ª—å—à–∞"],
        "ukraine": ["ua", "—É–∫—Ä–∞–∏–Ω–∞"],
        "belarus": ["by", "–±–µ–ª–∞—Ä—É—Å—å"],
        "indonesia": ["id", "–∏–Ω–¥–æ–Ω–µ–∑–∏—è"],
        "malaysia": ["my", "–º–∞–ª–∞–π–∑–∏—è"],
        "philippines": ["ph", "—Ñ–∏–ª–∏–ø–ø–∏–Ω—ã"],
        "vietnam": ["vn", "–≤—å–µ—Ç–Ω–∞–º"],
        "thailand": ["th", "—Ç–∞–π–ª–∞–Ω–¥"],
        "czech republic": ["cz", "—á–µ—Ö–∏—è"],
        "romania": ["ro", "—Ä—É–º—ã–Ω–∏—è"],
        "hungary": ["hu", "–≤–µ–Ω–≥—Ä–∏—è"],
        "greece": ["gr", "–≥—Ä–µ—Ü–∏—è"],
        "bulgaria": ["bg", "–±–æ–ª–≥–∞—Ä–∏—è"],
        "egypt": ["eg", "–µ–≥–∏–ø–µ—Ç"],
        "nigeria": ["ng", "–Ω–∏–≥–µ—Ä–∏—è"],
        "kenya": ["ke", "–∫–µ–Ω–∏—è"],
        "colombia": ["co", "–∫–æ–ª—É–º–±–∏—è"],
        "peru": ["pe", "–ø–µ—Ä—É"],
        "chile": ["cl", "—á–∏–ª–∏"],
        "venezuela": ["ve", "–≤–µ–Ω–µ—Å—É—ç–ª–∞"],
        "austria": ["at", "–∞–≤—Å—Ç—Ä–∏—è"],
        "belgium": ["be", "–±–µ–ª—å–≥–∏—è"],
        "ireland": ["ie", "–∏—Ä–ª–∞–Ω–¥–∏—è"]
    }
    return aliases.get(country_name.lower(), [])

def get_country_flag(country_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥"""
    flag_map = {
        "united states": "üá∫üá∏",
        "russia": "üá∑üá∫",
        "germany": "üá©üá™",
        "united kingdom": "üá¨üáß",
        "france": "üá´üá∑",
        "japan": "üáØüáµ",
        "brazil": "üáßüá∑",
        "south korea": "üá∞üá∑",
        "turkey": "üáπüá∑",
        "taiwan": "üáπüáº",
        "switzerland": "üá®üá≠",
        "china": "üá®üá≥",
        "india": "üáÆüá≥",
        "canada": "üá®üá¶",
        "australia": "üá¶üá∫",
        "singapore": "üá∏üá¨",
        "italy": "üáÆüáπ",
        "spain": "üá™üá∏",
        "portugal": "üáµüáπ",
        "norway": "üá≥üá¥",
        "finland": "üá´üáÆ",
        "denmark": "üá©üá∞",
        "poland": "üáµüá±",
        "ukraine": "üá∫üá¶",
        "belarus": "üáßüáæ",
        "indonesia": "üáÆüá©",
        "malaysia": "üá≤üáæ",
        "philippines": "üáµüá≠",
        "vietnam": "üáªüá≥",
        "thailand": "üáπüá≠",
        "czech republic": "üá®üáø",
        "romania": "üá∑üá¥",
        "hungary": "üá≠üá∫",
        "greece": "üá¨üá∑",
        "bulgaria": "üáßüá¨",
        "egypt": "üá™üá¨",
        "nigeria": "üá≥üá¨",
        "kenya": "üá∞üá™",
        "colombia": "üá®üá¥",
        "peru": "üáµüá™",
        "chile": "üá®üá±",
        "venezuela": "üáªüá™",
        "austria": "üá¶üáπ",
        "belgium": "üáßüá™",
        "ireland": "üáÆüá™"
    }
    return flag_map.get(country_name.lower(), "")

def get_country_flag_pattern(country_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã"""
    flag = get_country_flag(country_name)
    if flag:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ñ–ª–∞–≥–µ
        return re.escape(flag)
    return ""

def detect_by_keywords(config: str, target_country: str, aliases: list) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –∫–æ–Ω—Ñ–∏–≥–µ"""
    # –°–ª–æ–≤–∞—Ä—å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏)
    patterns = {
        'japan': [r'jp\b', r'japan', r'tokyo', r'\.jp\b', r'Êó•Êú¨', r'Êù±‰∫¨'],
        'united states': [r'us\b', r'usa\b', r'united states', r'new york', r'\.us\b', r'ÁæéÂõΩ', r'Á¥êÁ¥Ñ'],
        'russia': [r'ru\b', r'russia', r'moscow', r'\.ru\b', r'—Ä–æ—Å—Å–∏—è', r'‰øÑÂõΩ', r'–º–æ—Å–∫–≤–∞'],
        'germany': [r'de\b', r'germany', r'frankfurt', r'\.de\b', r'–≥–µ—Ä–º–∞–Ω–∏—è', r'Âæ∑ÂõΩ', r'„Éï„É©„É≥„ÇØ„Éï„É´„Éà'],
        'united kingdom': [r'uk\b', r'united kingdom', r'london', r'\.uk\b', r'Ëã±ÂõΩ', r'ÂÄ´Êï¶', r'gb'],
        'france': [r'france', r'paris', r'\.fr\b', r'Ê≥ïÂõΩ', r'Â∑¥Èªé'],
        'brazil': [r'brazil', r'sao paulo', r'\.br\b', r'Â∑¥Ë•ø', r'ËÅñ‰øùÁæÖ'],
        'singapore': [r'singapore', r'\.sg\b', r'Êñ∞Âä†Âù°', r'ÊòüÂä†Âù°'],
        'south korea': [r'korea', r'seoul', r'\.kr\b', r'Èü©ÂõΩ', r'È¶ñÁàæ', r'korean'],
        'turkey': [r'turkey', r'istanbul', r'\.tr\b', r'ÂúüËÄ≥ÂÖ∂', r'‰ºäÊñØÂù¶Â∏ÉÁàæ'],
        'taiwan': [r'taiwan', r'taipei', r'\.tw\b', r'Âè∞Êπæ', r'Âè∞Âåó'],
        'switzerland': [r'switzerland', r'zurich', r'\.ch\b', r'ÁëûÂ£´', r'ËòáÈªé‰∏ñ'],
        'india': [r'india', r'mumbai', r'\.in\b', r'Âç∞Â∫¶', r'Â≠üË≤∑'],
        'canada': [r'canada', r'toronto', r'\.ca\b', r'Âä†ÊãøÂ§ß', r'Â§öÂÄ´Â§ö'],
        'australia': [r'australia', r'sydney', r'\.au\b', r'Êæ≥Ê¥≤', r'ÊÇâÂ∞º'],
        'china': [r'china', r'beijing', r'\.cn\b', r'‰∏≠ÂõΩ', r'Âåó‰∫¨'],
        'italy': [r'italy', r'rome', r'\.it\b', r'ÊÑèÂ§ßÂà©', r'ÁæÖÈ¶¨'],
        'spain': [r'spain', r'madrid', r'\.es\b', r'Ë•øÁè≠Áâô', r'È©¨Âæ∑Èáå'],
        'portugal': [r'portugal', r'lisbon', r'\.pt\b', r'Ëë°ËêÑÁâô', r'ÈáåÊñØÊú¨'],
        'norway': [r'norway', r'oslo', r'\.no\b', r'Êå™Â®Å', r'Â••ÊñØÈôÜ'],
        'finland': [r'finland', r'helsinki', r'\.fi\b', r'Ëä¨ÂÖ∞', r'Ëµ´Â∞îËæõÂü∫'],
        'denmark': [r'denmark', r'copenhagen', r'\.dk\b', r'‰∏πÈ∫¶', r'Âì•Êú¨ÂìàÊ†π'],
        'poland': [r'poland', r'warsaw', r'\.pl\b', r'Ê≥¢ÂÖ∞', r'ÂçéÊ≤ô'],
        'ukraine': [r'ukraine', r'kyiv', r'\.ua\b', r'‰πåÂÖãÂÖ∞', r'Âü∫ËæÖ'],
        'belarus': [r'belarus', r'minsk', r'\.by\b', r'ÁôΩ‰øÑÁΩóÊñØ', r'ÊòéÊñØÂÖã'],
        'indonesia': [r'indonesia', r'jakarta', r'\.id\b', r'Âç∞Â∫¶Â∞ºË•ø‰∫ö', r'ÈõÖÂä†Ëææ'],
        'malaysia': [r'malaysia', r'kuala lumpur', r'\.my\b', r'È©¨Êù•Ë•ø‰∫ö', r'ÂêâÈöÜÂù°'],
        'philippines': [r'philippines', r'manila', r'\.ph\b', r'Ëè≤ÂæãÂÆæ', r'È©¨Â∞ºÊãâ'],
        'vietnam': [r'vietnam', r'hanoi', r'\.vn\b', r'Ë∂äÂçó', r'Ê≤≥ÂÜÖ'],
        'thailand': [r'thailand', r'bangkok', r'\.th\b', r'Ê≥∞ÂõΩ', r'ÊõºË∞∑'],
        'czech republic': [r'czech', r'prague', r'\.cz\b', r'Êç∑ÂÖã', r'Â∏ÉÊãâÊ†º'],
        'romania': [r'romania', r'bucharest', r'\.ro\b', r'ÁΩóÈ©¨Â∞º‰∫ö', r'Â∏ÉÂä†ÂãíÊñØÁâπ'],
        'hungary': [r'hungary', r'budapest', r'\.hu\b', r'ÂåàÁâôÂà©', r'Â∏ÉËææ‰Ω©ÊñØ'],
        'greece': [r'greece', r'athens', r'\.gr\b', r'Â∏åËÖä', r'ÈõÖÂÖ∏'],
        'bulgaria': [r'bulgaria', r'sofia', r'\.bg\b', r'‰øùÂä†Âà©‰∫ö', r'Á¥¢Èùû‰∫ö'],
        'egypt': [r'egypt', r'cairo', r'\.eg\b', r'ÂüÉÂèä', r'ÂºÄÁΩó'],
        'nigeria': [r'nigeria', r'abuja', r'\.ng\b', r'Â∞ºÊó•Âà©‰∫ö', r'ÈòøÂ∏ÉË¥æ'],
        'kenya': [r'kenya', r'nairobi', r'\.ke\b', r'ËÇØÂ∞º‰∫ö', r'ÂÜÖÁΩóÊØï'],
        'colombia': [r'colombia', r'bogota', r'\.co\b', r'Âì•‰º¶ÊØî‰∫ö', r'Ê≥¢Âì•Â§ß'],
        'peru': [r'peru', r'lima', r'\.pe\b', r'ÁßòÈ≤Å', r'Âà©È©¨'],
        'chile': [r'chile', r'santiago', r'\.cl\b', r'Êô∫Âà©', r'Âú£Âú∞‰∫öÂì•'],
        'venezuela': [r'venezuela', r'caracas', r'\.ve\b', r'ÂßîÂÜÖÁëûÊãâ', r'Âä†ÊãâÂä†ÊñØ'],
        'austria': [r'austria', r'vienna', r'\.at\b', r'Â••Âú∞Âà©', r'Áª¥‰πüÁ∫≥'],
        'belgium': [r'belgium', r'brussels', r'\.be\b', r'ÊØîÂà©Êó∂', r'Â∏ÉÈ≤ÅÂ°ûÂ∞î'],
        'ireland': [r'ireland', r'dublin', r'\.ie\b', r'Áà±Â∞îÂÖ∞', r'ÈÉΩÊüèÊûó']
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã
    target_keywords = []
    if target_country in patterns:
        target_keywords = patterns[target_country]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    for alias in aliases:
        if alias in patterns:
            target_keywords.extend(patterns[alias])
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    target_keywords = list(set(target_keywords))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for pattern in target_keywords:
        if re.search(pattern, config, re.IGNORECASE):
            return True
    
    return False

def extract_host(config: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–æ—Å—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    # –î–ª—è VMESS/VLESS —Å—Å—ã–ª–æ–∫
    if config.startswith(('vmess://', 'vless://')):
        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64
            encoded = config.split('://')[1].split('?')[0]
            padding = '=' * (-len(encoded) % 4)
            decoded = base64.b64decode(encoded + padding).decode('utf-8', errors='replace')
            json_data = json.loads(decoded)
            host = json_data.get('host') or json_data.get('add', '')
            if host:
                return host
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è VMESS/VLESS: {e}")
    
    # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–∏–ø–∞ host:port
    host_match = re.search(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', config)
    if host_match:
        return host_match.group(0)
    
    # –î–ª—è –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω
    domain = extract_domain(config)
    if domain:
        return domain
    
    return None

def extract_domain(config: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
    # –ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–æ–≤ –≤ URL
    url_match = re.search(r'(?:https?://)?([a-z0-9.-]+\.[a-z]{2,})', config, re.IGNORECASE)
    if url_match:
        return url_match.group(1)
    
    # –ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    domain_match = re.search(r'\b(?:[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}\b', config, re.IGNORECASE)
    if domain_match:
        return domain_match.group(0)
    
    return None

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for key in ['file_path', 'file_paths']:
        if key in context.user_data:
            file_paths = context.user_data[key]
            if not isinstance(file_paths, list):
                file_paths = [file_paths]
                
            for file_path in file_paths:
                if os.path.exists(file_path):
                    os.unlink(file_path)
            del context.user_data[key]
    
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("check_configs", check_configs)],
        states={
            WAITING_FILE: [
                MessageHandler(filters.Document.TEXT, handle_document),
                MessageHandler(filters.ALL & ~filters.COMMAND, 
                              lambda u, c: u.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."))
            ],
            WAITING_COUNTRY: [
                CallbackQueryHandler(button_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_country)
            ],
            WAITING_MODE: [
                CallbackQueryHandler(button_handler)
            ],
            SENDING_CONFIGS: [
                CallbackQueryHandler(button_handler)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_user=True
    )
    
    application.add_handler(conv_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render.com
    port = int(os.environ.get('PORT', 5000))
    external_host = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
    
    if external_host:
        # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è Render.com
        webhook_url = f"https://{external_host}/webhook"
        logger.info(f"–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook: {webhook_url}")
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url,
            url_path="webhook"
        )
    else:
        # –†–µ–∂–∏–º polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
        application.run_polling()

if __name__ == "__main__":
    main()
