import os
import re
import logging
import tempfile
import base64
import json
import pycountry
import requests
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MAX_FILE_SIZE = 15 * 1024 * 1024  # 15 MB
MAX_MSG_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø–∞—Å–æ–º
GEOIP_API = "http://ip-api.com/json/"
HEADERS = {'User-Agent': 'Telegram V2Ray Config Bot/1.0'}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_FILE, WAITING_COUNTRY = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
geo_cache = {}

def normalize_country_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    name = name.lower().strip()
    
    # –ó–∞–º–µ–Ω–∞ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
    ru_en_map = {
        "—Ä–æ—Å—Å–∏—è": "russia", "—Å—à–∞": "united states", "–≥–µ—Ä–º–∞–Ω–∏—è": "germany",
        "—è–ø–æ–Ω–∏—è": "japan", "—Ñ—Ä–∞–Ω—Ü–∏—è": "france", "–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "united kingdom",
        "—Å–∏–Ω–≥–∞–ø—É—Ä": "singapore", "–Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": "netherlands", "–∫–∞–Ω–∞–¥–∞": "canada",
        "—à–≤–µ–π—Ü–∞—Ä–∏—è": "switzerland", "—à–≤–µ—Ü–∏—è": "sweden", "–∞–≤—Å—Ç—Ä–∞–ª–∏—è": "australia",
        "–±—Ä–∞–∑–∏–ª–∏—è": "brazil", "–∏–Ω–¥–∏—è": "india", "—é–∂–Ω–∞—è –∫–æ—Ä–µ—è": "south korea",
        "—Ç—É—Ä—Ü–∏—è": "turkey", "—Ç–∞–π–≤–∞–Ω—å": "taiwan", "—à–≤–µ–π—Ü–∞—Ä–∏—è": "switzerland"
    }
    return ru_en_map.get(name, name)

async def check_configs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ V2RayTun."
    )
    return WAITING_FILE

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    user = update.message.from_user
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not document.mime_type.startswith('text/'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE//1024//1024}MB"
        )
        return ConversationHandler.END
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    file = await context.bot.get_file(document.file_id)
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        await file.download_to_memory(tmp_file)
        context.user_data['file_path'] = tmp_file.name
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª: {document.file_name}")
    await update.message.reply_text(
        "‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):"
    )
    return WAITING_COUNTRY

async def handle_country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω—ã –∏ –≤—ã–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    country_request = update.message.text
    normalized_name = normalize_country_name(country_request)
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É —á–µ—Ä–µ–∑ pycountry
        country = pycountry.countries.search_fuzzy(normalized_name)[0]
        target_country = country.name.lower()
    except LookupError:
        await update.message.reply_text("‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return ConversationHandler.END
    
    # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    try:
        with open(context.user_data['file_path'], 'r', encoding='utf-8') as f:
            configs = f.read().splitlines()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
        return ConversationHandler.END
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if 'file_path' in context.user_data:
            if os.path.exists(context.user_data['file_path']):
                os.unlink(context.user_data['file_path'])
            del context.user_data['file_path']
    
    # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
    matched_configs = []
    for config in configs:
        if not config.strip():
            continue
        
        config_country = identify_country(config)
        if config_country and target_country == config_country:
            matched_configs.append(config)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not matched_configs:
        await update.message.reply_text(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {country.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    header = f"–∫–æ–Ω—Ñ–∏–≥–∏: {country.name}\n"
    current_message = header
    
    for config in matched_configs:
        config_line = f"{config}\n"
        
        if len(current_message) + len(config_line) > MAX_MSG_LENGTH:
            await update.message.reply_text(f"```\n{current_message}\n```", parse_mode='MarkdownV2')
            current_message = header + config_line
        else:
            current_message += config_line
    
    if len(current_message) > len(header):
        await update.message.reply_text(f"```\n{current_message}\n```", parse_mode='MarkdownV2')
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(matched_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è {country.name}")
    return ConversationHandler.END

def identify_country(config: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    if config in geo_cache:
        return geo_cache[config]
    
    # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —ç–º–æ–¥–∑–∏
    country_match = detect_by_keywords(config)
    if country_match:
        geo_cache[config] = country_match
        return country_match
    
    # –ú–µ—Ç–æ–¥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ IP/–¥–æ–º–µ–Ω–∞
    host = extract_host(config)
    if not host:
        return None
    
    # –ú–µ—Ç–æ–¥ 3: –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ IP
    country_name = geolocate_host(host)
    geo_cache[config] = country_name
    return country_name

def detect_by_keywords(config: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –∫–æ–Ω—Ñ–∏–≥–µ"""
    # –°–ª–æ–≤–∞—Ä—å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏)
    patterns = {
        'japan': [r'üáØüáµ', r'\bjp\b', r'japan', r'tokyo', r'\.jp\b', r'Êó•Êú¨'],
        'united states': [r'üá∫üá∏', r'\bus\b', r'usa\b', r'united states', r'new york', r'\.us\b', r'ÁæéÂõΩ'],
        'russia': [r'üá∑üá∫', r'\bru\b', r'russia', r'moscow', r'\.ru\b', r'—Ä–æ—Å—Å–∏—è', r'‰øÑÂõΩ'],
        'germany': [r'üá©üá™', r'\bde\b', r'germany', r'frankfurt', r'\.de\b', r'–≥–µ—Ä–º–∞–Ω–∏—è', r'Âæ∑ÂõΩ'],
        'united kingdom': [r'üá¨üáß', r'\buk\b', r'united kingdom', r'london', r'\.uk\b', r'Ëã±ÂõΩ'],
        'france': [r'üá´üá∑', r'france', r'paris', r'\.fr\b', r'Ê≥ïÂõΩ'],
        'brazil': [r'üáßüá∑', r'brazil', r'sao paulo', r'\.br\b', r'Â∑¥Ë•ø'],
        'singapore': [r'üá∏üá¨', r'singapore', r'\.sg\b', r'Êñ∞Âä†Âù°'],
        'south korea': [r'üá∞üá∑', r'korea', r'seoul', r'\.kr\b', r'Èü©ÂõΩ'],
        'turkey': [r'üáπüá∑', r'turkey', r'istanbul', r'\.tr\b', r'ÂúüËÄ≥ÂÖ∂'],
        'taiwan': [r'üáπüáº', r'taiwan', r'taipei', r'\.tw\b', r'Âè∞Êπæ'],
        'switzerland': [r'üá®üá≠', r'switzerland', r'zurich', r'\.ch\b', r'ÁëûÂ£´']
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for country, regex_list in patterns.items():
        for pattern in regex_list:
            if re.search(pattern, config, re.IGNORECASE):
                return country
    
    return None

def extract_host(config: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–æ—Å—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    # –î–ª—è VMESS/VLESS —Å—Å—ã–ª–æ–∫
    if config.startswith(('vmess://', 'vless://')):
        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64
            encoded = config.split('://')[1].split('?')[0]
            padding = '=' * (-len(encoded) % 4)
            decoded = base64.b64decode(encoded + padding).decode('utf-8')
            json_data = json.loads(decoded)
            return json_data.get('host') or json_data.get('add', '')
        except Exception:
            pass
    
    # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–∏–ø–∞ host:port
    host_match = re.search(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', config)
    if host_match:
        return host_match.group(0)
    
    # –î–ª—è –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω
    domain_match = re.search(r'\b(?:[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}\b', config, re.IGNORECASE)
    if domain_match:
        return domain_match.group(0)
    
    return None

def geolocate_host(host: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ —Ö–æ—Å—Ç—É —á–µ—Ä–µ–∑ API"""
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if re.match(r'(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[0-1])\.)', host):
            return None
        
        response = requests.get(f"{GEOIP_API}{host}", headers=HEADERS, timeout=3)
        data = response.json()
        if data.get('status') == 'success':
            return data.get('country', '').lower()
    except Exception:
        pass
    return None

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    if 'file_path' in context.user_data:
        if os.path.exists(context.user_data['file_path']):
            os.unlink(context.user_data['file_path'])
        del context.user_data['file_path']
    
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("check_configs", check_configs)],
        states={
            WAITING_FILE: [
                MessageHandler(filters.Document.TEXT, handle_document),
                MessageHandler(filters.ALL & ~filters.COMMAND, 
                              lambda u, c: u.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."))
            ],
            WAITING_COUNTRY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_country)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render.com
    port = int(os.environ.get('PORT', 5000))
    external_host = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
    
    if external_host:
        # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è Render.com
        webhook_url = f"https://{external_host}/webhook"
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url,
            url_path="webhook"
        )
    else:
        # –†–µ–∂–∏–º polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        application.run_polling()

if __name__ == "__main__":
    main()
